{"Name":"CRSAlertView","Id":1879,"Alias":"CRSAlertView","Description":"## Details\n\nCRSAlertView is a Xamarin component built for iOS that replaces the stock UIAlertView with something a little more customizable and beautiful. Off the bat, CRSAlertView provides support for an icon image and text input so your alert can be more like a modular information view that takes screen precedence. \n\nCRSAlertView was built by the mobile team at [Curse, Inc.](https://curseinc.com) and is used extensively in the [Curse Voice for iOS](https://itunes.apple.com/us/app/curse/id935720218) app.\n\n## Open Source\n\nThis component is also open sourced on [Github](https://www.github.com/cursestaff/crsalertview)","Version":"1.0.0","Summary":"A custom, beautiful substitute to UIAlertView","QuickStart":"## Installing\n\n**Coming soon to a Xamarin Component Store near you!**\n\nIf Xamarin Components aren\u0027t your thing, then you can just drag the `CRSAlertView.cs` class into your project by hand. CRSAlertView is built using the Unified iOS API.\n\n## Using\n\nCRSAlertView has three main parts that are worth mentioning - the alert view itself, alert actions, and an alert input. The alert view is self-explanatory. Alert actions are little bits of functionality that are associated to button presses on an alert view. The alert input is a case that we needed for Curse Voice Mobile that we decided to extend through this library as well. It allows a user\u0027s input of text, and for you as the developer to grab that during an alert action if you so wish. Just add this to the top of any class you want to use the alert in:\n\n```c#\nusing Curse;\n```\n\n#### Alert Actions\n\nWe\u0027ll start with alert actions. These are pretty self-evident as to what they do, though there are a few properties that you can utilize to offer a cleaner UX through the alert view. First we\u0027ll start by creating an action:\n\n```c#\nvar action = new CRSAlertAction {\n\tText = \"Cancel\",\n\tHighlighted = true,\n\tTintColor = UIColor.Cyan,\n\tDidSelect = (alert) =\u003e {\n\t\t// Do something here on press\n\t}\n};\n```\n\nThe first part of an alert action, `Text`, is the button text that is displayed on the CRSAlertView. `Highlighted` is used in conjunction with `TintColor` to denote whether this action should appear bolded and a different color. TintColor is not used if Highlighted == false. Using both of these properties smartly can help aid your users to find the actions that are important much easier than just a set of buttons that all appear with the same weight. The final property, `DidSelect`, is an `Action\u003cCRSAlertView\u003e` that is called whenever that button is selected. By passing the alert view back you can look at and use various properties on it to do anything necessary on selection. **`Text` is the only mandatory property, the others are optional.**\n\n#### Alert View\n\nNow that you\u0027ve made a couple actions for your alert view, let\u0027s make the alert view:\n\n```c#\nvar action = new CRSAlertAction {\n\tText = \"Cancel\",\n\tHighlighted = true,\n\tTintColor = UIColor.Cyan,\n\tDidSelect = (alert) =\u003e {\n\t\t// Do something here on press\n\t}\n};\nvar alertView = new CRSAlertView {\n\tTitle = \"Hello World!\",\n\tMessage = \"This alert actually works :)\",\n\tImage = UIImage.FromBundle(\"someIcon\"),\n\tActions = new CRSAlertAction[] { action }\n};\nalertView.Show();\n```\n\nAlright I know it looks easy, but let\u0027s walk through everything. `Title` and `Message` are both strings that reference the bolded title and standard message for an alert view. You can pass a `UIImage` into the `Image` property and it will put this image above the title in the resulting CRSAlertView. The UIImageView that is behind the scenes has a TintColor property on it that\u0027s set to match the text color, so if you pass in an image that is templated, it will match that color - a nice UI touch for your alert views. `Actions` is just an array of all the actions you want to use for this alert view.\n\n#### Alert Input\n\nBesides the actions, an alert view can also hold an input field for adding a message. Here\u0027s how you\u0027d add an input:\n\n```c#\nvar input = new CRSAlertInput {\n\tImage = UIImage.FromBundle(\"someIcon\"),\n\tPlaceholder = \"Type a Message\",\n\tText = \"Prefill a Message\",\n\tTintColor = UIColor.Cyan,\n\tOpenAutomatically = true\n};\nalertView.Input = input;\nalertView.Show();\n```\n\nThe `Image` property is for a small icon next to the text view inside the alert - this also coincides with the `TintColor` property to use a templated image that is a certain color. `Placeholder` and `Text` correspond to the placeholder and prefilled text of the text view. `OpenAutomatically` is a boolean value that determines whether the keyboard opens automatically after the alert is shown or not.\n\n\n#### Customizing\n\nThere are several defaults set statically on the CRSAlertView class that will determine fonts and colors of an alert view. If you don\u0027t set these, a neutral UI is shown. But what fun is a component without a little customization? You have control of these properties - and if you set them, we recommend setting these in your app delegate to have app wide functionality.\n\n```c#\n// Colors\npublic static UIColor Tint = UIColor.FromRGB (3, 127, 241);\npublic static UIColor Background = UIColor.FromRGB(0xf3, 0xf3, 0xf3);\npublic static UIColor TitleTextColor = UIColor.Black;\npublic static UIColor MessageTextColor = UIColor.Black;\npublic static UIColor InputTextColor = UIColor.Black;\npublic static UIColor ButtonBackground = UIColor.FromRGB (228, 228, 228);\npublic static UIColor ButtonHighlighted = UIColor.FromRGB (210, 210, 210);\npublic static UIColor SeparatorColor = UIColor.FromRGB( 212, 212, 212 );\n\n// Fonts\npublic static UIFont TitleFont = UIFont.BoldSystemFontOfSize (18f);\npublic static UIFont MessageFont = UIFont.SystemFontOfSize (14f);\npublic static UIFont InputFont = UIFont.SystemFontOfSize(14f);\npublic static UIFont AlertButtonHighlightedFont = UIFont.BoldSystemFontOfSize(16f);\npublic static UIFont AlertButtonNormalFont = UIFont.SystemFontOfSize(16f);\n```\n\nSo to change something like the title text color of the alert view to red, just do something like this:\n\n```c#\nCRSAlertView.TitleTextColor = UIColor.Red;\n```\n\nAnd that should propagate to all alert views that are created until that property is set again.\n\n#### Showing/Hiding\n\nAfter you have created an alert view, you can show it like so:\n\n```c#\nalertView.Show();\n```\n\nHiding an alert view can be done by either calling `Hide()` on the instance, or by letting the alert actions call it themselves. Any time a user clicks on an alert action the hide function is called as well. **You don\u0027t have to manually call Hide() unless you want to do some from another event.**","Hash":"f0c4d2c41b80736eb9b83c7f25dc04dc","TargetPlatforms":["ios"],"TrialHash":null}